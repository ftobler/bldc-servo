import json



h1 = """
/**
 * This file is automatically generated through python.
 *
 * If you feel the urge to change anything in it, I recommend
 * to resist and changing the python script which generates it instead.
 *
 * python file: "modbus_gen.py"
 */

#ifndef AUTOGENERATED_MODBUS_H_
#define AUTOGENERATED_MODBUS_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "stdint.h"

enum {
"""

h2 = """
};

typedef struct {
    uint16_t address;
    uint16_t minimum;
    uint16_t maximum;
    uint16_t defaultvalue;
} Database_limit_t;

typedef struct {
"""

h3 = """} Database_declaration_t;

typedef struct {
"""

h4 = """} Database_value_t;

#ifdef __cplusplus
}
#endif

#endif /* AUTOGENERATED_MODBUS_H_ */
"""

c1 = """
/**
 * This file is automatically generated through python.
 *
 * If you feel the urge to change anything in it, I recommend
 * to resist and changing the python script which generates it instead.
 *
 * python file: "modbus_gen.py"
 */

#include "stdint.h"
#include "autogenerated_modbus.h"

const Database_declaration_t database_declaration = {
"""

c2 = """};

Database_value_t database_value = {
"""

c3 = """};
"""


with open("modbus.json", "r") as f:
    jso = json.loads(f.read())


with open("autogenerated_modbus.h", "w") as f:
    f.write(h1)
    f.write("    DATABASE_LENGTH = %d" % len(jso))
    f.write(h2)
    for parameter in jso:
        name = parameter["name"]
        comment = parameter["comment"]
        f.write("    Database_limit_t %s; // %s\n" % (name, comment))
    f.write(h3)
    for parameter in jso:
        name = parameter["name"]
        comment = parameter["comment"]
        f.write("    uint16_t %s; // %s\n" % (name, comment))
    f.write(h4)



with open("autogenerated_modbus.c", "w") as f:
    f.write(c1)
    for parameter in jso:
        name = parameter["name"]
        addr = parameter["id"]
        min = parameter["min"]
        if min == None:
            min = 0
        max = parameter["max"]
        if max == None:
            max = 2**16-1
        default = parameter["default"]
        if default == None:
            default = 0
        comment = parameter["comment"]
        if comment == None:
            comment = ""
        f.write("    .%s = {.address = %4d, .minimum = %5d, .maximum = %5d, .defaultvalue = %5d}, // %s\n" % (name.ljust(16), addr, min, max, default, comment))
    f.write(c2)
    for parameter in jso:
        name = parameter["name"]
        addr = parameter["id"]
        default = parameter["default"]
        if default == None:
            default = 0
        comment = parameter["comment"]
        if comment == None:
            comment = ""
        f.write("    .%s = %5d, // [%d] %s\n" % (name.ljust(16), default, addr, comment))
    f.write(c3)